/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/table.glb 
*/

import React, { useEffect, useState } from "react";
import { Color } from "three";
import { useFrame } from "@react-three/fiber";
import { useScroll, useGLTF, Html } from "@react-three/drei";
import Project from "./Project";
import Stars from "./Stars";
import Texts from "./Texts";
import KeyboardMouse from "./KeyboardMouse";
import Human from "./Human";
import Table from "./Table";

const monitorBloomColor = new Color("ffffff");
monitorBloomColor.multiplyScalar(1.5);

const projList = {
  micrograd_plus: [
    "https://github.com/siddiskid/micrograd_plus",
    "Inspired by Andrej Karpathy's micrograd, micrograd_plus is an autograd engine over scalar-valued Directed Acyclic Graphs. It extends micrograd by implementing additional activation functions, like sigmoid and relu, in addition to the included tanh along with a draw function that draws a DAG with all neurons and their gradients. micrograd_plus can be used to make neural networks for binary classification tasks",
    ["Python", "PyTorch", "Tensorflow"],
  ],
  worklearn_scraper: [
    "https://github.com/siddiskid/worklearn_scraper",
    "A web scraping application used to get job listing data from careers online on an excel sheet. Built to save time on reading job requirements and spend that on actually applying to jobs",
    ["Python", "Excel", "Pandas"],
  ],
  "Ryu's Conquest": [
    "https://github.com/siddiskid/Snakes-and-Hackers-II",
    "Once upon a time, a village is invaded by an army of malevolent robots. Upon leaving, they took away the most valuable things in the world — games. While the inhabitants of the village were filled with sadness, a brave warrior named Ryu has decided to step up and go on a quest to bring back the games. To do that, he needs to beat the robots in four classic games on planet Xamos, Opus, Icrozar, and Duex. Let’s see if he can beat the robots!",
    ["JS", "React"],
  ],
  "Budget Buddy": [
    "https://github.com/siddiskid/budget_buddy",
    "Budget Buddy is a dynamic budget tracking app designed to make managing your finances a breeze. With insights about your spending habits, monthly and weekly statistics, and ability to set realistic budget limits, Budget Buddy helps you develop healthy financial habits and makes adulting a little bit easier",
    ["Java"],
  ],
  "Wellness 360": [
    "https://github.com/siddiskid/Wellness360",
    "Wellness 360 is a website which shows users the nearest health and lifestyle locations and lets them book appointments with any of these places. It also has a chatbot which asks the user what symptoms they are facing and tells them the disease they are most likely affected by. Additionally, Wellness 360 Enterprise is a website for businesses, where they can register themselves with us and get updates on appointments booked with them.",
    ["JS", "React"],
  ],
};
const CAMERA_INITIAL_POSITION = [0, 5.7533, 14.4358];
const CAMERA_FINAL_POSITION = [0.9772, 5.523, 28.9418];
const CAMERA_INITIAL_ROTATION = [0.005, 0, 0];
const CAMERA_FINAL_ROTATION = [0, 2.9442 - 2 * Math.PI, 0];

export default function Master(props) {
  const { nodes, materials } = useGLTF("./models/table.glb");
  const [currProj, updateCurrProj] = useState(
    "Hover on a project to preview, click on it to check it out"
  );
  const [currProjDesc, updateCurrProjDesc] = useState("NONE");
  const [currProjStack, updateCurrProjStack] = useState(["NONE"]);

  const [shouldShowScroll, setShouldShowScroll] = useState(true);
  const [shouldShowScrollTime, setShouldShowScrollTime] = useState(false);

  const [showIntro1, setShowIntro1] = useState(false);
  const [showIntro2, setShowIntro2] = useState(false);
  const [showIntro3, setShowIntro3] = useState(false);

  const [rotate, setRotate] = useState(false);

  const scroll = useScroll();

  useEffect(() => {
    document.getElementById("root").style.opacity = 1;
    document.getElementById("root").style.display = "block";
    setTimeout(() => setShouldShowScrollTime(true), 1500);
  });

  useFrame((state) => {
    setRotate(window.innerWidth < window.innerHeight);

    const offset = scroll.offset;

    state.camera.position.set(
      CAMERA_INITIAL_POSITION[0] +
        (CAMERA_FINAL_POSITION[0] - CAMERA_INITIAL_POSITION[0]) * offset,
      CAMERA_INITIAL_POSITION[1] +
        (CAMERA_FINAL_POSITION[1] - CAMERA_INITIAL_POSITION[1]) * offset,
      CAMERA_INITIAL_POSITION[2] +
        (CAMERA_FINAL_POSITION[2] - CAMERA_INITIAL_POSITION[2]) * offset
    );
    state.camera.rotation.set(
      CAMERA_INITIAL_ROTATION[0] +
        (CAMERA_FINAL_ROTATION[0] - CAMERA_INITIAL_ROTATION[0]) * offset,
      CAMERA_INITIAL_ROTATION[1] +
        (CAMERA_FINAL_ROTATION[1] - CAMERA_INITIAL_ROTATION[1]) * offset,
      CAMERA_INITIAL_ROTATION[2] +
        (CAMERA_FINAL_ROTATION[2] - CAMERA_INITIAL_ROTATION[2]) * offset
    );

    setShouldShowScroll(
      state.camera.position.x == CAMERA_INITIAL_POSITION[0] &&
        state.camera.position.y == CAMERA_INITIAL_POSITION[1] &&
        state.camera.position.z == CAMERA_INITIAL_POSITION[2]
    );

    if (state.camera.position.x >= 0.0607) {
      setShowIntro1(true);
    }

    if (state.camera.position.x >= 0.3391) {
      setShowIntro2(true);
    }

    if (state.camera.position.x >= 0.5032) {
      setShowIntro3(true);
    }
  });

  return (
    <group {...props} dispose={null}>
      {rotate ? (
        <Html
          position={[0, 5.7533, 0]}
          transform
          portal={{ current: scroll.fixed }}
        >
          <div className="rotateScreenWrapper">
            <img src="https://d38c2om1h5phmk.cloudfront.net/Rotate.gif"></img>
            <div className="rotateScreenText">Rotate your device to start</div>
          </div>
        </Html>
      ) : (
        <group>
          <Html
            position={[0, 0.25, 0]}
            transform
            portal={{ current: scroll.fixed }}
          >
            <div
              className={
                shouldShowScroll & shouldShowScrollTime
                  ? "scrollToNavigate"
                  : "scrollToNavigate hideScrollToNavigate"
              }
            >
              Scroll to navigate
            </div>
          </Html>
          <group
            position={[0.543, 6.017, 37.038]}
            rotation={[Math.PI / 2, 0, -3.142]}
            scale={0.218}
          >
            <mesh
              geometry={nodes.Plane006.geometry}
              material={materials["Glossy material"]}
            />
            <mesh
              geometry={nodes.Plane006_1.geometry}
              material={materials.Screen}
            >
              <meshStandardMaterial />
              <Html
                position={[-0.05, 0, 0]}
                rotation={[-Math.PI / 2, 0, 0]}
                transform
                portal={{ current: scroll.fixed }}
              >
                <Project
                  projName={currProj}
                  projDesc={currProjDesc}
                  projStack={currProjStack}
                />
              </Html>
            </mesh>
          </group>
          <mesh
            geometry={nodes.Monitor_Neon_Left.geometry}
            material={nodes.Monitor_Neon_Left.material}
            position={[4.033, 6.017, 37.029]}
            scale={[0.01, 7.87, 0.01]}
          >
            <meshBasicMaterial color={monitorBloomColor} toneMapped={false} />
          </mesh>
          <mesh
            geometry={nodes.Monitor_Neon_Top.geometry}
            material={nodes.Monitor_Neon_Top.material}
            position={[0.548, 7.985, 37.029]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[0.01, 13.95, 0.01]}
          >
            <meshBasicMaterial color={monitorBloomColor} toneMapped={false} />
          </mesh>
          <mesh
            geometry={nodes.Monitor_Neon_Bottom.geometry}
            material={nodes.Monitor_Neon_Bottom.material}
            position={[0.548, 4.053, 37.029]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[0.01, 13.921, 0.01]}
          >
            <meshBasicMaterial color={monitorBloomColor} toneMapped={false} />
          </mesh>
          <mesh
            geometry={nodes.Monitor_Neon_Right.geometry}
            material={nodes.Monitor_Neon_Right.material}
            position={[-2.938, 6.017, 37.029]}
            scale={[0.01, 7.87, 0.01]}
          >
            <meshBasicMaterial color={monitorBloomColor} toneMapped={false} />
          </mesh>
          <meshStandardMaterial />
          <Html
            position={[-3.85, 6.017, 35.726]}
            rotation={[0, 2.9, 0]}
            scale={0.25}
            transform
            portal={{ current: scroll.fixed }}
          >
            <div className="projectListWrapper">
              {Object.entries(projList).map(([key, value]) => (
                <div
                  key={value[0]}
                  className="projectListText"
                  onMouseEnter={() => {
                    updateCurrProj(key);
                    updateCurrProjDesc(value[1]);
                    updateCurrProjStack(value[2]);
                    props.cursor.classList.add("fill");
                  }}
                  onMouseLeave={() => {
                    updateCurrProj(
                      "Hover on a project to preview, click on it to check it out"
                    );
                    updateCurrProjDesc("NONE");
                    updateCurrProjStack("NONE");
                    props.cursor.classList.remove("fill");
                  }}
                >
                  <a
                    onMouseEnter={() => {
                      props.cursor.classList.add("fill");
                    }}
                    onMouseLeave={() => {
                      props.cursor.classList.remove("fill");
                    }}
                    href={value[0]}
                  >
                    {key}
                  </a>
                </div>
              ))}
            </div>
          </Html>
          <Table nodes={nodes} materials={materials} />
          <KeyboardMouse nodes={nodes} materials={materials} />
          <Human nodes={nodes} materials={materials} />
          <Texts
            showIntro1={showIntro1}
            showIntro2={showIntro2}
            showIntro3={showIntro3}
            cursor={props.cursor}
          />
        </group>
      )}
      <Stars />
    </group>
  );
}

useGLTF.preload("/models/table.glb");
